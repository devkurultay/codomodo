[
{
    "model": "courses.track",
    "pk": 1,
    "fields": {
        "name": "Python",
        "description": "Python lang",
        "is_published": true,
        "date_time_created": "2022-12-24T15:11:14.799Z",
        "date_time_modified": "2022-12-24T15:11:14.799Z",
        "programming_language": "Python"
    }
},
{
    "model": "courses.unit",
    "pk": 1,
    "fields": {
        "name": "Python синтаксиси",
        "description": "Python синтаксис негиздери",
        "is_published": true,
        "track": 1,
        "date_time_created": "2022-12-24T15:11:42.170Z",
        "date_time_modified": "2022-12-24T15:12:42.636Z"
    }
},
{
    "model": "courses.lesson",
    "pk": 1,
    "fields": {
        "name": "Синтаксис негиздери",
        "is_published": true,
        "unit": 1,
        "badge": null,
        "date_time_created": "2022-12-24T15:12:07.525Z",
        "date_time_modified": "2022-12-24T17:59:49.750Z"
    }
},
{
    "model": "courses.exercise",
    "pk": 1,
    "fields": {
        "name": "Салам, дүйнө!",
        "lecture": "Программалоо бул компьютерди колдонуучу менен сүйлөшүүгө үйрөтүү десек, анда адегенде компьютерге сүйлөшүүнү үйрөтүш керек. Python тилинде бул басып чыгаруу оператору менен ишке ашат.\n\n`print(\"Салам, дүйнө!\")`\n`print(\"Салам Ала-Тоо, салам мекеним!\")`\n\nБасып чыгаруу функциясы - бул Python программаңыздын сиз менен байланышуусунун эң оңой жолу. Бул функция кутучаңыздагы эң баалуу куралдардын бири болуп калат. (Баса, функция деген сөздөн коркпоңуз, аны кийинчерээк кенен талдайбыз).",
        "instruction": "Басып чыгаруу функциясын колдонуп, терминалга өзүңүз каалаган билдирүүнү чыгарыңыз.",
        "hint": "Текстти басып чыгарганда аны жалгыз (') же кош (\") тырмакчага алышыңыз керек.",
        "default_code": "print(\"Hello world!\")",
        "duration": 0,
        "input_should_contain": "print",
        "input_should_not_contain": "",
        "input_error_text": "print('текстиңиз ушул жерде') сыяктуу кылып print() функциясын колдонушуңуз керек.",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 2,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-24T15:14:06.692Z",
        "date_time_modified": "2022-12-25T06:23:57.339Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 2,
    "fields": {
        "name": "print() функциясы",
        "lecture": "print() функциясы Python програмчынын жакын досу болот, негизи. Аны менен консолго пайдалуу маалымат чыгарсак болот. Азырынча тексттерди жана сандарды чыгара туралы:\n`print(\"жалгыз аргумент\")`\n`print(\"мен биринчимин\", \"мен үтүрдөн кийинкимин\")`\n`print(1, 2, 3, 4)`\nДагы бир шумдук жери бар (чынын айтканда, көп деле колдонулбайт): ар бир аргументти `sep` деген параметр менен ажыратсак болот. Мисалы, `print(\"бир\", \"эки\", sep=\" :) \")` десек, консолго `бир :) эки` чыгат.",
        "instruction": "Эми өзүңүз мисалдарды жазып көрүңүз! Бир аргумент, эки аргумент менен чыгарыңыз. Андан соң `sep` ажыраткычы менен дагы аракет кылып көрүңүз.",
        "hint": "print(\"жалгызмын\")\nprint(\"бир\", \"эки\")\nprint(\"биз\", \"ажырабай\", \"жабышып\", \"калдык\", sep='+')",
        "default_code": "print('алга!')",
        "duration": 0,
        "input_should_contain": "print,sep",
        "input_should_not_contain": "",
        "input_error_text": "print() функциясы менен текст чыгарыңыз, `sep` колдонуңуз!",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 3,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-24T18:37:17.442Z",
        "date_time_modified": "2022-12-25T06:48:21.575Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 3,
    "fields": {
        "name": "Саптык чоңдуктар (strings)",
        "lecture": "Саптык чоңдук деп татаал термин менен айтканыбыз менен ал жөнөкөй эле текст. Python тилинде (башка тилдерде колдонулган сыяктуу) дайындар түзүлүштөрү (структуры данных, data structures) бар. Алардын бири ушул саптык чоңдуктар.\n\nТексттер тырмакчаларга алынат: \"могу сыяктуу\" же 'ушул сыяктуу'. Тырмакчанын ичине сан кирип калса, анда ал деле текст деп эсептелет. Мисалы: print('18 жааа-ааа-ааш!'). Тексттерди бири-бирине кошуп/туташтырып консолго чыгара алабыз: print(\"мен өзүнчө тургам\" + \" мен болсо чиркешип алдым\").",
        "instruction": "Өзүңүздүн атыңызды жана жашыңызды + оператору менен кошуп, консолго чыгарыңыз.",
        "hint": "Мисалы: print(\"Халк \" + \"42\")",
        "default_code": "# кодуңузду ушундан кийинки сапка жазыңыз",
        "duration": 0,
        "input_should_contain": "print",
        "input_should_not_contain": "",
        "input_error_text": "Апей, окшошпой калды окшойт. Кыйытманы бир карап үлгү алсаңыз болот.",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 4,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-24T18:55:00.564Z",
        "date_time_modified": "2022-12-25T07:43:53.717Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 4,
    "fields": {
        "name": "Каталар менен иштөө",
        "lecture": "Програмчылар ар дайым каталарга (bugs) жана бөтөнчөлүктөргө (exceptions) кабылып турушат. Өзүм тууралуу айтсам, иштеген убактымдын 90% каталар менен күрөшүүгө кетет. Сиз дагы көп ката кетиришиңиз мүмкүн. Бул кадыресе көрүнүш, өзүңүздү жаман сезбеңиз. Каталар кете баштаса эле \"колуман келбейт экен\" деп таштап салбаңыз, аракеттене бериңиз.\nСаптык чоңдуктар менен иштегенде төмөнкүдөй каталар чыгышы мүмкүн:\nБир тырмакча жалгыз, бири кош тырмакча болгондо (мисалы: 'тырмакчаларым дал келишпейт\") `SyntaxError: unterminated string literal` деген бөтөнчөлүк чыгат.\nЭгерде такыр эле тырмакчага албай `print(салам)` сыяктуу текст жазсаңыз, анда `NameError: name 'салам' is not defined` деген бөтөнчөлүк чыгат.\nЭгерде тексте санды чаптайын десеңиз (мисалы \"текст\" + 123), `TypeError: can only concatenate str (not \"int\") to str` деген бөтөнчөлүк чыгат.\nSyntaxError, NameError, TypeError бул бөтөнчөлүктөрдүн (exceptions, исключения) мисалдары. Алар тууралуу кийин кеңири маалымат алабыз.",
        "instruction": "Редактордо бөтөнчөлүк көтөргөн үч мисал жаздык. Биринчисинде тырмакчалар бири-бирине дал келишпейт, экинчисинде тырмакча такыр эле жок. Үчүнчүсүндө бири-бирине түрү боюнча туура келбеген чоңдуктарды бириктирип жатабыз.\nПрограмма иштесин үчүн каталарды оңдоп көрүңүз.",
        "hint": "Биринчисинде тырмакчалар туура болушу керек. Экинчини тырмакчага алыш керек. Үчүнчүдөгү 123 деген сан чоңдугун \"123\" сыяктуу кылып саптчык (текст) чоңдукка айландыруу зарыл.",
        "default_code": "print(\"менде ката бар')\nprint(менде дагы)\nprint(\"менде жок болуш керек, билбейм\" + 123)\n",
        "duration": 0,
        "input_should_contain": "",
        "input_should_not_contain": "",
        "input_error_text": "",
        "output_should_contain": "",
        "output_should_not_contain": "SyntaxError,NameError,TypeError",
        "output_error_text": "Апей, каталарды оңдогон жоксуз го? SyntaxError, NameError, TypeError деген бөтөнчөлүктөр чыкпашы зарыл.",
        "unit_test": "",
        "next_exercise": 5,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T06:44:45.469Z",
        "date_time_modified": "2022-12-25T09:39:29.912Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 5,
    "fields": {
        "name": "Өзгөрмөлөр",
        "lecture": "Python'до жана жалпысынан эле программалоодо, убакыттын өтүшү менен өзгөрүп турган дайындар (data, данные) менен иштөө үчүн системаларды куруу керек. Бул дайындар адамдын туулган жери же сутканын убактысы болушу мүмкүн. Же сиз азыр көрүп жаткан сериалдын аты. Иши кылып, ал ар кандай убакта ар кандай болушу мүмкүн. Python өзгөрүлүүчү нерселерди аныктоо үчүн өзгөрмөлөрдү (variables, переменные) колдонот:\n`motivation = \"Код жазганды үйрөнө аласыз!\"`\n`current_exercise = 5`\nЖогорудагы мисалда биз `motivation` деп аталган өзгөрмө аныктадык да, \"Код жазганды үйрөнө аласыз!\" деген сапка теңеп койдук. Ошондой эле `current_exercise` деп аталган өзгөрмөнү аныктап, аны 5 санына барабар кылдык.\nӨзгөрмөлөрдү колдонуу боюнча кеңири маалымат курстун өтүшү менен берилет.",
        "instruction": "`independence_day` деген өзгөрмө түзүңүз жана ага Кыргызстандын эгемендүүлүк күнүн майрамдаган датаны жазыңыз.",
        "hint": "independence_day = \"31-Август\"",
        "default_code": "",
        "duration": 0,
        "input_should_contain": "independence_day",
        "input_should_not_contain": "",
        "input_error_text": "independence_day деген өзгөрмө түзбөпсүз го?",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 6,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T07:43:16.867Z",
        "date_time_modified": "2022-12-25T13:45:22.873Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 6,
    "fields": {
        "name": "Арифметика",
        "lecture": "Компьютерлердин өзгөчө жакшы иштей ала турган нерсеси - арифметикалык амалдарды аткаруу. Кошуу, кемитүү, көбөйтүү, бөлүү, жана башка сандар менен байланыштуу эсептерди көпчүлүк программалоо тилдеринде аткаруу оңой, жана Python да өзгөчө эмес. Кээ бир мисалдар:\nchong_sandardy_koshuu = 65432 + 34098\nongoi_kemituu = 89 - 87\ntataal_kobouituu = 38 * 902\nkaldyktuu_boluu = 744 / 35\ntegerektep_boluu = 744 // 35\naralash_amal = 431 * 87655 + 321 / 9 - 8\nЖогорудагы арифметикалык амалдардын ар бирин өзгөрмөгө ыйгардык. Өзгөрмө ар бир операциянын акыркы жыйынтыгын кармап турат. Арифметикалык операторлордун аткарылыш ирети кадимки арифметикалык амалдар тартиби боюнча жүргүзүлөт.\nPython тилинде модул оператору деген нерсе бар. Модул оператору % белгиси менен көрсөтүлөт жана бөлүү аткарылгандан калган калдыгын кайтарат. bul_tak_san = 33 % 2\nbul_san_jetige_bolunot = 147 % 7\nБиринчи мисалда 33 санын 2ге бөлгөндөн чыккан калдыкты `bul_tak_san` өзгөрмөсүнө жаздырдык. 33 так сан болгондуктан, амалдын натыйжасы 1 болот.\nБиз 147 / 7нин калдыгын экинчи мисалда текшерип жатабыз. 147 санын 7ге бөлгөндө калдык жок болгондуктан, 147 % 7 0 деген натыйжа `bul_san_jetige_bolunot` өзгөрмөсүнө жаздырылды.",
        "instruction": "1. Эки санды көбөйтүп, натыйжасын `product` деп аталган өзгөрмөгө жаздырыңыз. `бир_өзгөрмө = 123` сыяктуу болот, билип калдыңыз да, э?\n`division` деп аталган өзгөрмө түзүп, ага 45 санын 9га бөлгөндө келип чыккан натыйжаны карматыңыз. `бөлүү = 45 / 9` сыяктуу кылып.\n2. 1727 санын 22ге бөлгөндө калдыгы кандай болот? Натыйжасын `remainder` атуу өзгөрмөгө жаздырыңыз.",
        "hint": "1. `product = 12 * 34` жана `division = 45 / 9` сыяктуу болот. Өзүңүз ойлоп тапкан башка сандарды дагы колдонуп көрүңүз.\n2. Бөлүү амалынан келип чыккан калдыкты `%` оператору менен алабыз. Натыйжаны өзгөрмөгө жаздырганды өзүңүз деле билип калсаңыз керек.",
        "default_code": "# Кодуңузду төмөн жакка жазыңыз",
        "duration": 0,
        "input_should_contain": "product,division,remainder,%",
        "input_should_not_contain": "",
        "input_error_text": "product, division, remainder деген өзгөрмөлөрдү түздүңүз беле? Модул операторун колдондуңузбу?",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 13,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T09:29:28.493Z",
        "date_time_modified": "2022-12-25T14:03:12.838Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 13,
    "fields": {
        "name": "Өзгөрмөлөрдү жаңыртуу",
        "lecture": "Өзгөрмөнүн мазмунун өзгөртүү маанилүү операциялардын бири. Программа иштеп жатканда, өзгөрүүлөрдү чагылдыруу үчүн өзгөрмөгө жаздырылган дайындар жаңыртылышы керек.\n```\nчүкөлөрүмдүн_саны = 50\nуткан_чүкөлөрүмдүн_саны = 20\nчүкөлөрүмдүн_саны = уткан_чүкөлөрүмдүн_саны + чүкөлөрүмдүн_саны\n```\nЖогорудагы мисалда чүкөлөрүмдүн баштапкы саны 50 болчу. Анан 20 чүкө утуп алып, чүкөлөрүмдүн саны көбөйдү. `чүкөлөрүмдүн_саны` өзгөрмөсүн жаңыртуу үчүн `уткан_чүкөлөрүмдүн_саны` кошулган `чүкөлөрүмдүн_саны` (мурунку абалы) болду.\nБул код блогунун аягында `чүкөлөрүмдүн_саны` өзгөрмөсү 70 барабар болду. Санды кошуу же кемитүү аркылуу өзгөрмөнү жаңылоо көп кездешкен амал болгондуктан, анын кыска жолу бар.\n```\nчүкөлөрүмдүн_саны = 50\nуткан_чүкөлөрүмдүн_саны = 20\nчүкөлөрүмдүн_саны += уткан_чүкөлөрүмдүн_саны\n```\nБул жогорку мисалдын кыскача жазылышы.\n\nДагы бир мисал. Оюн жазып жатасыз дейли. Ар бир этаптан өткөн соң, оюнчуга 50 упай берилет. \n```\npoints = 0\npoints += 50\n```\nЭгерде оюнчу ката кетирсе, 20 упай кемитилет:\n```\npoints -= 20\n```\nБонустук этаптан өткөндө топтолгон упайлар 2 санына көбөйтүлөт:\n```\npoints *= 2\n```\nБонустук этаптан өткөндө топтолгон упайлар 2 санына көбөйтүлөт:\n```\npoints *= 2\n```\nБонустук этаптан өтпөй калса, упайлар 1.5 санына бөлүнөт:\n```\npoints /= 1.5\n```",
        "instruction": "Редактордогу кодго 15 алмурут (pears) кошуңуз. Аны `total_items` өзгөрмөсүнө кошуңуз.",
        "hint": "`бир_өзгөрмө += башка_нерсе` сыяктуу жазыш керек.",
        "default_code": "total_items = 0\napples = 14\noranges = 55\ntotal_items += apples\ntotal_items += oranges\npears = \n",
        "duration": 0,
        "input_should_contain": "",
        "input_should_not_contain": "",
        "input_error_text": "",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "pears = 15 деп жаздыңыз беле? Аны total_items'ке коштуңуз беле?",
        "unit_test": "assert total_items == 84, \"84 чыгыш керек болчу\"",
        "next_exercise": 14,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T13:13:57.532Z",
        "date_time_modified": "2022-12-25T14:41:56.982Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 14,
    "fields": {
        "name": "Комментарийлер",
        "lecture": "Көбүнчө, кодду окуп туруп эле ал эмне кылып жатканын түшүнүктүү болгондой жазыш керек. Бирок, эгер сиз кодуңуздун бир бөлүгүн түшүндүрүү үчүн маалымат кошкуңуз келсе, # белгисин колдоно аласыз. Тексттин алдына # белгиси коюлган сап комментарий деп аталат. Python бул кодду иштетпейт — ал адамдар үчүн жазылат. Кодуңузду кийинчерээк кайра карап чыкканыңызда, комментарийлер ал эмне үчүн жазылганын түшүнүүгө жардам берет.\nМисал:\n```\n# бул жерде чүкөлөрдүн жалпы саны жазылат\ntotal_items = 42\n```",
        "instruction": "Редактордогу коддун жогору жагына түшүндүрүүчү комментарий жазыңыз.",
        "hint": "# чакаларды эсептеп жатабыз сыяктуу деле боло берет",
        "default_code": "chaka = 13\nchacka -= 3\n",
        "duration": 0,
        "input_should_contain": "#",
        "input_should_not_contain": "",
        "input_error_text": "# символун колдонуп комментарий жаздыңызбы?",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 15,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T14:02:58.929Z",
        "date_time_modified": "2022-12-25T15:01:38.493Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 15,
    "fields": {
        "name": "Сандар",
        "lecture": "Өзгөрмөлөр сан түрүндөгү чоңдуктарды да кармай алат. Python тилиндеги сандын эң жөнөкөй түрү `бүтүн сан` (int) болуп саналат. Мисалы:\n```\nint1 = 1\nint2 = 10\nint3 = -5\n```\nОндук чекити бар сан `калкыма чекиттүү сан` (float) деп аталат. Калкыма чекиттүү сандарды бүтүн сан жазып, ага ондук чекиттен кийин дагы сандарды чаптап жазасыз:\n```\nfloat1 = 4.0\nfloat2 = 11.0\nfloat3 = -8.5\n```\nКалкыма чекиттүү сандарды илимий нотация менен 10-даражага көтөрүп дагы көрсөтүү мүмкүн:\n```\n# бул 270ке барабар:\nfloat4 = 2.7e2\n```",
        "instruction": "1. Сиз базарга бардыңыз дейли. Бюджетиңизди пландаштыруу үчүн азык-түлүк тизмесин түзөлү. Сиз сабиз сатып алайын деп ниеттенип жатасыз дейли. Аны `carrots` деп аталган өзгөрмөдө сактаңыз.\n2. Ар бир сабиз 2.42 сом турат. Сабиздин баасын `price_per_carrot` деп аталган өзгөрмөдө сактаңыз.\n3. Cабиздин саны менен сабиздин наркынын көбөйтүндүсү болгон `total_cost` деп аталган жаңы өзгөрмө түзүңүз.\n4. `total_cost` басып чыгарыңыз. Ал кандай дайындар түрүндө чыгып жатат?",
        "hint": "carrots, price_per_carrot, total_cost деген өзгөрмөлөрдү түзүңүз.\n`price_per_carrot = 2.42` экенин түшүндүңүз да?",
        "default_code": "# кодуңузду ушунун төмөн жагына жазыңыз\n",
        "duration": 0,
        "input_should_contain": "carrots,price_per_carrot,total_cost",
        "input_should_not_contain": "",
        "input_error_text": "carrots, price_per_carrot, total_cost деген өзгөрмөлөр түзүлдүбү?",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": 16,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T14:41:39.535Z",
        "date_time_modified": "2022-12-25T15:01:38.482Z",
        "text_file_content": ""
    }
},
{
    "model": "courses.exercise",
    "pk": 16,
    "fields": {
        "name": "Тегеректөө менен бөлүү",
        "lecture": "Python тилинде эки бүтүн санды бөлгөндө, натыйжада калкыма чектиттүү сан чыгат (float). Бирок сизге бүтүн сан керек болсочу? Программалоодо көп \nэле кездешкен маселе. Мисалы, 109 / 10 десеңиз натыйжада 10.9 чыгат. Бирок бизге 10 эле кызык дейли. Кантебиз? Кош таякча жардам бере алат: 109 // 10 деп бөлгөндө ондук чекитке чейинки сан эле берилип, калдыгы жоюлат. Бул амалдын натыйжасында бүтүн сан (int) чыгат. Көңүл буруңуз, бул ыкма менен тегеректөө сизге ар дайым эле туура келбесе керек. Мисалы, 10.9 деген сан 11 санына жакын, балким сизге ошол сан керек болгондур? Азырынча бул маселе боюнча иш жүргүзбөйбүз. Бир гана // оператору тууралуу маалымат бергибиз келди.",
        "instruction": "Редактордо берилген коддогу `number_after_point` өзгөрмөсүн экранга чыгарыңыз.",
        "hint": "print(бир_өзгөрмө) сыяктуу чыгарасыз да, эсиңиздеби?",
        "default_code": "float_division = 111 / 11\nint_division = 111 // 11\nnumber_after_point = float_division - int_division\n",
        "duration": 0,
        "input_should_contain": "print",
        "input_should_not_contain": "",
        "input_error_text": "number_after_point өзгөрмөсүн экранга print() функциясы менен чыгарышыңыз керек!",
        "output_should_contain": "",
        "output_should_not_contain": "",
        "output_error_text": "",
        "unit_test": "",
        "next_exercise": null,
        "karma": 1,
        "is_published": true,
        "lesson": 1,
        "date_time_created": "2022-12-25T15:01:17.132Z",
        "date_time_modified": "2022-12-25T15:01:17.132Z",
        "text_file_content": ""
    }
},
{
    "model": "users.user",
    "fields": {
        "password": "bcrypt_sha256$$2b$10$FDMgk6.wd1RS87rrQnfq4.TlkG5RUPeV5xXwGj76HQWmxVgjPY4yG",
        "last_login": "2022-12-24T15:10:29.347Z",
        "is_superuser": true,
        "first_name": "",
        "last_name": "",
        "is_staff": true,
        "is_active": true,
        "date_joined": "2022-12-24T15:10:11.493Z",
        "name": null,
        "username": "",
        "email": "jumasheff@gmail.com",
        "groups": [],
        "user_permissions": []
    }
}
]
