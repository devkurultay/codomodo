# Generated by Django 3.0.3 on 2020-02-13 13:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of a Badge')),
                ('is_published', models.BooleanField()),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Badge Creation Date and Time')),
                ('date_time_modified', models.DateTimeField(auto_now=True, verbose_name='Badge Modification Date and Time')),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of an Exercise')),
                ('lecture', models.TextField(verbose_name='Lecture Text')),
                ('instruction', models.TextField(verbose_name='Instruction Text')),
                ('hint', models.TextField(blank=True, null=True, verbose_name='Hint on how to solve the task')),
                ('default_code', models.TextField(blank=True, verbose_name='Default Code')),
                ('duration', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='Exercise duration in minutes')),
                ('input_should_contain', models.CharField(blank=True, help_text='separate with comma, without spaces, like this: my_var,hello world', max_length=255, verbose_name='List of keywords which should be presented in the submitted code')),
                ('input_should_not_contain', models.CharField(blank=True, help_text='separate with comma, without spaces, like this: my_var,hello world', max_length=255, verbose_name='List of keywords which should NOT be presented in the submitted code')),
                ('input_error_text', models.CharField(blank=True, max_length=255, verbose_name='Error text shown when expected input was not found in the written code')),
                ('output_should_contain', models.CharField(blank=True, help_text='separate with comma, without spaces, like this: my_var,hello world', max_length=255, verbose_name='List of keywords which should be presented in the output')),
                ('output_should_not_contain', models.CharField(blank=True, help_text='separate with comma, without spaces, like this: my_var,hello world', max_length=255, verbose_name='List of keywords which should NOT be presented in the output')),
                ('output_error_text', models.CharField(blank=True, max_length=255, verbose_name="Error text shown when expected output doesn't show up")),
                ('unit_test', models.TextField(blank=True, verbose_name='Code for testing with unit tests')),
                ('karma', models.PositiveSmallIntegerField(default=1, verbose_name='Point to be given for passing the current exercise')),
                ('is_published', models.BooleanField()),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Exercise Creation Date and Time')),
                ('date_time_modified', models.DateTimeField(auto_now=True, verbose_name='Exercise Modification Date and Time')),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of a Track')),
                ('description', models.CharField(max_length=255, verbose_name='Description of a Track')),
                ('is_published', models.BooleanField()),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Track Creation Date and Time')),
                ('date_time_modified', models.DateTimeField(auto_now=True, verbose_name='Track Modification Date and Time')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of a Unit')),
                ('description', models.CharField(max_length=255, verbose_name='Description of a Unit')),
                ('is_published', models.BooleanField()),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Unit Creation Date and Time')),
                ('date_time_modified', models.DateTimeField(auto_now=True, verbose_name='Unit Modification Date and Time')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_unit', to='courses.Track')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_code', models.TextField(blank=True, verbose_name='Submitted code')),
                ('lecture', models.TextField(blank=True, null=True, verbose_name='Lecture Text')),
                ('instruction', models.TextField(blank=True, null=True, verbose_name='Instruction Text')),
                ('hint', models.TextField(blank=True, null=True, verbose_name='Hint on how to solve the task')),
                ('input_should_contain', models.CharField(blank=True, max_length=255, null=True, verbose_name='List of input control keywords copied from exercise (positive assertion)')),
                ('input_should_not_contain', models.CharField(blank=True, max_length=255, null=True, verbose_name='List of control keywords copied from exercise (negative assertion)')),
                ('input_error_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Error text shown when expected input was not found in the written code')),
                ('output_should_contain', models.CharField(blank=True, max_length=255, null=True, verbose_name='List of output control keywords copied from the exercise (positive assertion)')),
                ('output_should_not_contain', models.CharField(blank=True, max_length=255, null=True, verbose_name='List of output control keywords copied from the exercise (negative assertion)')),
                ('output_error_text', models.CharField(blank=True, max_length=255, null=True, verbose_name="Error text shown when expected output doesn't show up")),
                ('unit_test', models.TextField(blank=True, null=True, verbose_name='Code for testing with unit tests from original exercise')),
                ('karma', models.PositiveSmallIntegerField(default=0, verbose_name='Gained points')),
                ('failed_attempts', models.PositiveIntegerField(blank=True, default=0, verbose_name='Amount of attempts user failed to pass the exercise')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Submission Date and Time')),
                ('date_time_modified', models.DateTimeField(auto_now=True, verbose_name='Submission Modification Date and Time')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_submission', to='courses.Exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_submission', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of a Lesson')),
                ('is_published', models.BooleanField()),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Lesson Creation Date and Time')),
                ('date_time_modified', models.DateTimeField(auto_now=True, verbose_name='Lesson Modification Date and Time')),
                ('badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lesson_badge', to='courses.Badge')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_lesson', to='courses.Unit')),
            ],
        ),
        migrations.AddField(
            model_name='exercise',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_exercise', to='courses.Lesson'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='next_exercise',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Exercise'),
        ),
    ]
